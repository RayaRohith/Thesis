To Gather subdomains using sublist3r
# Install sublist3r
pip install sublist3r

# Run sublist3r to gather subdomains for example.com
sublist3r -d example.com -o subdomains.txt ( add domain name in the palce of example.com)
using selenium to automate the browser
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

# Read subdomains from the file
with open('subdomains.txt', 'r') as file:
    subdomains = file.read().splitlines()

# Set up Selenium WebDriver (assuming you have the appropriate WebDriver installed, e.g., chromedriver)
driver = webdriver.Chrome(executable_path='/path/to/chromedriver')

# Automate browser actions for each subdomain
for subdomain in subdomains:
    url = f"http://{subdomain}"
    driver.get(url)
    time.sleep(5)  # Wait for the page to load
    # Perform more actions if needed

driver.quit()
Using TCP DUMP to capture the traffic or wireshark
# Capture traffic on the interface (e.g., eth0) and save it to a file
sudo tcpdump -i eth0 -w traffic.pcap

t-shark is the command-line version of Wireshark. It can read the packet capture files generated by dumpcap and perform various analyses
To read and display packets from capture
tshark -r capture.pcap
To filer the TRAFFIC like TCP/IP/HTTP
tshark -r capture.pcap -Y http
To AUTOMATE the entire process use shell script
#!/bin/bash

# Define the network interface and the output file
INTERFACE="eth0"
OUTPUT_FILE="capture.pcap"
CAPTURE_DURATION=60  # Capture duration in seconds

# Start capturing traffic
echo "Starting capture on interface $INTERFACE for $CAPTURE_DURATION seconds..."
sudo dumpcap -i $INTERFACE -a duration:$CAPTURE_DURATION -w $OUTPUT_FILE

# Wait for the capture to complete
echo "Capture completed. Analyzing traffic..."

# Analyze the captured traffic with tshark
# Extract source and destination IP addresses
tshark -r $OUTPUT_FILE -T fields -e ip.src -e ip.dst > traffic_analysis.txt

echo "Analysis complete. Results saved in traffic_analysis.txt"

